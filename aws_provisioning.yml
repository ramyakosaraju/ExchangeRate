---
- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.micro
    security_group: default
    keypair: RedHat_Ramya
    region: us-east-2
    image: ami-0dacb0c129b49f529
    count: 1
  vars_files:
    - aws_keys.yml

  tasks:
    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: The webservers security group
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 5000
            to_port: 5000
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    - name: Launch the new EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        keypair: "{{ keypair }}"
        count: "{{count}}"
        instance_tags:
          Name: TestEnvironment
      register: ec2
    - name: Add the newly created host so that we can further contact it
      add_host:
        name: "{{ item.public_ip }}"
        groups: webservers
      with_items: "{{ ec2.instances }}"
    - name: Add tag to Instance(s)
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: "present"
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Type: webserver
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22 
        state: started 
      with_items: "{{ ec2.instances }}"
- hosts: webservers
  remote_user: ec2-user
  become: yes
  gather_facts: no
  tasks:
   - name: Install git
     yum:
       name: git
       state: present  
   - name: Install Python3
     raw: yum -y install python3
   - name: Install docker
     become: True
     become_user: root
     yum:
       name: docker 
       state: latest
   - name: Enable docker
     service:
       name: docker
       enabled: yes
   - name: Start docker service
     become: True
     become_user: root
     service:
       name: docker
       state: started

   - name: Install pip module
     become: True
     become_user: root
     yum: 
       name: python-pip 
       state: latest
   - name: Install Python docker module
     become: True
     become_user: root
     pip: name=docker state=present
   - name: Pull Docker Image
     docker_image:
        name: centos
   - name: pull Mysql Image
     docker_image:
        name: mysql/mysql-server
        tag : 8.0
   - name: Creates directory
     file:
       path: /Docker
       state: directory
   - name: Copying python file
     copy:
       src: /home/ramyakosaraju/docker/ExchangeRate.py
       dest: /Docker/
   - name: Copying Docker file
     copy:
       src: /home/ramyakosaraju/docker/Dockerfile
       dest: /Docker/
   - name: Copying Docker file
     copy:
       src: /home/ramyakosaraju/docker/docker-compose.yml
       dest: /
   - name: Copying Docker file
     copy:
       src: /home/ramyakosaraju/docker/docker-compose.yml
       dest: /
       mode: 0777
   - name: Copying templates for Exchange rate
     copy:
       src: /home/ramyakosaraju/docker/templates
       dest: /Docker/
   - name: Copying Docker file
     copy:
       src: /home/ramyakosaraju/docker/docker-compose.yml
       dest: /Docker
       mode: 0777
   - name: Copying static for Exchange rate
     copy:
       src: /home/ramyakosaraju/docker/static
       dest: /Docker/
   - name: Build image
     docker_image:
       name: ramyakosaraju/python5
       tag: ansible
       path: /Docker/
       state: present
   - name: Created mysqltable
     copy:
       src: /home/ramyakosaraju/docker/mysql
       dest: /Docker
       mode: 0777
   - name: Building mysql
     docker_image:
       name: ramyakosaraju/mysql
       tag: ansible
       path: /Docker/mysql
       state: present
   - name: Download and install Docker Compose
     get_url:
        url: https://github.com/docker/compose/releases/download/1.21.2/docker-compose-Linux-x86_64
        dest: /usr/bin/docker-compose
        mode: 0755
   - name: Creating Directory fot the Jmeter
     file:
       path: /jmeter
       state: directory
   - name: Copying the jmx file
     copy :
       src: /home/ramyakosaraju/Jmeter/Exchange.jmx
       dest: /jmeter
   - name: create containers using docker-compose
     command: docker-compose up -d
     args:
      chdir: /Docker/
   - name: Fix 'support_tools' permissions
     become: True
     become_user: root
     file:
       path: /var/run/docker.sock
       owner: root
       group: docker
       mode: '0777'
   - name: "Install Java"
     package: name=java state=present
   - name: "Install Jmeter"
     unarchive:
       src: http://ftp.tudelft.nl/apache//jmeter/binaries/apache-jmeter-5.2.1.tgz
       dest: /usr
       remote_src: yes
   - name: "Running Jmeter tests"
     command: ./jmeter.sh -n -t /jmeter/Exchange.jmx
     args:
      chdir: /usr/apache-jmeter-5.2.1/bin/
   - name: Log into private registry and force re-authorization
     docker_login:
       username: ramyakosaraju
       password: password
       reauthorize: yes
   - name: Tag and push to docker hub
     docker_image:
       name: ramyakosaraju/python5
       tag: ansible
       push: yes
   - name: Tag and push to docker hub
     docker_image:
       name: ramyakosaraju/mysql
       tag: ansible
       push: yes
- hosts: localhost
  connection: local
  vars:
    region: us-east-2
  vars_files:
    - aws_keys.yml
  tasks:
    - name: Gather EC2 facts
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
          "tag:Type": "webserver"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: ec2
    - debug: var=ec2

    - name: Terminate EC2 Instance(s)
      ec2:
        instance_ids: '{{ item.instance_id }}'
        state: absent
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      with_items: "{{ ec2.instances }}"
